version: "3.9"

services:
  redis:
    image: redis:7
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 2s
      retries: 5
    restart: on-failure
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf

  postgres:
    build:
      context: ./infra
      dockerfile: Dockerfile_postgres
    environment:
      # POSTGRES_USER: ${POSTGRES_USER:-}
      # POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-}
      # POSTGRES_DB: ${POSTGRES_DB:-}
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB_FILE: /run/secrets/postgres_db
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db
    restart: on-failure
    volumes:
      - ./infra/pgdata:/var/lib/postgresql/data
      - ./infra/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $(cat /run/secrets/postgres_user 2>/dev/null || echo ${POSTGRES_USER}) -d $(cat /run/secrets/postgres_db 2>/dev/null || echo ${POSTGRES_DB})"]
      interval: 10s
      timeout: 5s
      retries: 5

  user_service:
    build: ./user_service
    depends_on:
      postgres:
        condition: service_healthy
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: on-failure
    ports:
      - "8000:8000"
    command: >
      /bin/sh -c "
        PG_USER=$(cat /run/secrets/postgres_user) &&
        PG_PASS=$(cat /run/secrets/postgres_password) &&
        PG_DB=$(cat /run/secrets/postgres_db) &&
        export DATABASE_URL=\"postgresql://${PG_USER}:${PG_PASS}@postgres:5432/${PG_DB}\" &&
        exec uvicorn main:app --host 0.0.0.0 --port 8000
      "

  vector_service:
    build: ./vector_service
    depends_on:
      postgres:
        condition: service_healthy
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: on-failure
    ports:
      - "8001:8001"
    command: >
      /bin/sh -c "
        PG_USER=$(cat /run/secrets/postgres_user) &&
        PG_PASS=$(cat /run/secrets/postgres_password) &&
        PG_DB=$(cat /run/secrets/postgres_db) &&
        export DATABASE_URL=\"postgresql://${PG_USER}:${PG_PASS}@postgres:5432/${PG_DB}\" &&
        exec uvicorn main:app --host 0.0.0.0 --port 8001
      "

  nlp_service:
    build: ./nlp_service
    depends_on:
      vector_service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: on-failure
    ports:
      - "8002:8002"
    command: >
      /bin/sh -c "
        PG_USER=$(cat /run/secrets/postgres_user) &&
        PG_PASS=$(cat /run/secrets/postgres_password) &&
        PG_DB=$(cat /run/secrets/postgres_db) &&
        export DATABASE_URL=\"postgresql://${PG_USER}:${PG_PASS}@postgres:5432/${PG_DB}\" &&
        exec uvicorn main:app --host 0.0.0.0 --port 8002
      "

  gateway_service:
    build: ./gateway_service
    depends_on:
      user_service:
        condition: service_healthy
      vector_service:
        condition: service_healthy
      nlp_service:
        condition: service_healthy
    environment:
      USER_SERVICE_URL: http://user_service:8000
      VECTOR_SERVICE_URL: http://vector_service:8001
      NLP_SERVICE_URL: http://nlp_service:8002
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    ports:
      - "8003:8003"
    restart: on-failure

  frontend_service:
    build: ./frontend
    depends_on:
      gateway_service:
        condition: service_healthy
      user_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    ports:
      - "8004:8004"
    restart: on-failure

secrets:
  postgres_user:
    file: ./secrets/postgres_user
  postgres_password:
    file: ./secrets/postgres_password
  postgres_db:
    file: ./secrets/postgres_db
  pgadmin_email:
    file: ./secrets/pgadmin_email
  pgadmin_password:
    file: ./secrets/pgadmin_password

volumes:
  redis-data:
  pgadmin-data:
  pgdata: